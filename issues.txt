On the main portal page the 'Show All' button reloads the page.
    Change this so that the page doesn't reload, but the map
    list reloads all maps.

On the main portal page the 'Clear Map' button clears everything,
including the background layers. 
    Change this so that only the user created map layers are cleared.

On the main portal page the Search box reloads the entire page when
a search is performed.
    Change this so that the searches can be performed without reloading
    the entire page.

The meta data page should be rewritten to show the map on half the page and
to show the metadata on the other half of the page. 
    Change the page so that meta data is only the Author, the title, and the 
    description of the map. Make sure that the data and map parts of the page
    stay in their specified sections.

Create a documentation portion of the website that describes how everything works
and how to recreate it.


############################## DONE ############################## 
Make all url requests with python, and load the data from local source.
############################## DONE ############################## 


############################## DONE ############################## 
Set python only to make requests for data when people click buttons. Attempting to load
all of the map data on the initial page load could be very taxing on time. It currently
loads all data made by a python request on start up.
############################## DONE ############################## 


Add ability to put disclaimer or license or health warning on the data, with a that has to
be clicked to access the data.

*** Going to add ajax to search function on portal page

I need to figure out a better way to deal with the password and username variables because they are still 
available as response context variables



Clean up the Javascript and rebuild it with tests. One piece at a time.

Make example site with only the map page and the data that we collect from the publications.


Fork this project on github and make a version with webglearth


Add the marker cluster thing after a bit.

Get a server going.

Get some tests up and running.

Authentication and tests.
--> allow institutional accounts and stuff

Now that the data can be encrypted, I need to figure out how to make it not save on updates to dataset stuff.
Every time the dataset is updated the password gets reencrypted, so the encrypted password gets incrypted, that
cannot happen.

I think that probably a bit of code that is like this would do the trick:

    if form.instance.dataset_user == dataset.dataset_user:
        return dataset.dataset_user
    else:
        other stuff I already wrote

I need to set the environmental keys into a permanent file. So, the .zshrc or something. This goes for any other
secret keys that I will be using.

Instead of inventing my own method to encrypt the fields I will use a pypi
package
